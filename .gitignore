########################################################################################################################
# GITIGNORE 使用说明
########################################################################################################################
# 1. 文件忽略规则:
#   01. 开头的/并不是标识文件夹的，要表明仅忽略文件夹需要在名称后面添加 /
#   02. 要想忽略某文件夹，但其下部分文件不能忽略。则需要添加通配符*，然后在后面添加！开头的规则，来指出不忽略的文件或文件夹
#   03. 只要写了路径，即/左右两边都有字符，那么就是指的“绝对路径”(相对仓库的，仓库.git文件夹所在目录为根目录)，
#       但可以用*来指定层级，指定第几层子目录下的某个文件夹
#   04. 空格不匹配任意文件，可作为分隔符，可用反斜杠转义
#   05. # 开头的模式标识注释，可以使用反斜杠进行转义
#   06. ! 开头的模式标识否定，该文件将会再次被包含，如果排除了该文件的父级目录，则使用 ! 也不会再次被包含。可以使用反斜杠进行转义
#   07. / 结束的模式只匹配文件夹以及在该文件夹路径下的内容，但是不匹配该文件
#   08. / 开始的模式匹配项目根目录
#       如果一个模式不包含斜杠，则它匹配相对于当前 .gitignore 文件路径的内容，
#       如果该模式不在 .gitignore 文件中，则相对于项目根目录
#   09. **匹配多级目录，可在开始，中间，结束
#   10. ? 通用匹配单个字符
#   11. [] 通用匹配单个字符列表
#
# 2. 常用匹配示例
#   01. bin/        : 仅忽略此 .gitignore 所在文件夹中的 bin 目录，不忽略 bin 文件
#   02. /bin        : 仅忽略根目录下的bin文件
#   03. !/bin/run.sh: 不忽略 bin 目录下的 run.sh 文件
#   04. /*.c        : 仅忽略根目录下以 .c 结尾的所有文件
#   05. debug/*.obj : 仅忽略此 .gitignore 所在文件夹中的 debug 目录下以 .obj 结尾的所有文件
#   06. **/foo      : 仅忽略所有目录中名为 foo 的文件
#   07. a/**/b      : 仅忽略此 .gitignore 所在文件夹中的 a 目录及 a 目录的所有子目录下的名为 b 的文件

#
# 3. 规则不生效的问题
#   .gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。
#   解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:
#       git rm -r --cached .
#       git add .
#       git commit -m 'update .gitignore'
#
# 4. 全局的 .gitignore 文件
#   这种方式也需要创建相应的 .gitignore 文件，可以放在C:/Users/用户名/目录下。然后在使用以下命令配置Git：
#   git config --global core.excludesfile ~/.gitignore
#
# 5. 忽略规则的优先级
#   在 .gitingore 文件中，每一行指定一个忽略规则，Git 检查忽略规则的时候有多个来源，它的优先级如下（由高到低）：
#   01. 从命令行中读取可用的忽略规则
#   02. 当前目录定义的规则
#   03. 父级目录定义的规则，依次递推
#   04. $GIT_DIR/info/exclude 文件中定义的规则
#   05. core.excludesfile中定义的全局规则
########################################################################################################################
/outputs*
